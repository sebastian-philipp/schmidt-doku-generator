#!/usr/bin/env python
# -*- coding: utf-8 -*-

import xml.dom.minidom
from xml.sax.saxutils import escape

def prettyPrint(xmlString):
	x = xml.dom.minidom.parseString(xmlString)
	return x.toprettyxml()

def elem(e, t, attr = {}):
	attr = " ".join(['%s="%s"'%(k, v) for (k,v) in attr.items()])
	return "<%s %s>%s</%s>\n" % (e, attr, t, e) if len(attr) else  "<%s>%s</%s>\n" % (e, t, e)

def toA(n, href):
	return elem("a", n, {"href": href})

def toUl(l):
	return elem("ol", "".join([elem("li", x) for x in l]))

def toP(c):
	return elem("p", c)

def write(name, content):
	print "writing", name
	with open(name, "w") as f:
		f.write(content)
		
def navigation(meta, l, r = None):
	"""eg navigation(meta, ("<< Prev", "foo.html"))"""
	l = [
			(meta["seminarSubject"], meta["seminarLink"]),
			(meta["seminar"], "index.html"),
			l
		]
	if r is not None:
		l.append(r)
	bareList = [ "[ %s ]" % toA(n, l) for (n,l) in l]
	bare = "<hr /> ... %s ... <hr />" % " ... ".join(bareList)
	return elem("div", bare)

def sectionToNaviElem(section, prefix = "", postfix = ""):
	return (prefix + section["name"] + postfix, sectionToFileName(section))
		
def sectionToFileName(section):
	return sectionNameToFileName(section["name"])
	
def sectionNameToFileName(sectionName):
	return sectionName.lower() + ".html"
	
def head(meta, pagetitle = None):
	meta["title"] = "Seminar - %s" % meta["seminar"] if pagetitle is None else "%s | Seminar - %s" % (pagetitle, meta["seminar"])
	return ("""
<head>
	<title>%(title)s</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="author" content="%(author)s" />
	<link rel=stylesheet href=style.css>
</head>""" % meta)

def footer():
	return """
	<div style="font-size:70%">generated by <a href="https://github.com/sebastian-philipp/schmidt-doku-generator">schmidt-doku-generator</a> (GitHub)</div>"""


# index

def frameIndex(meta):
	"""usage {"seminar": seminar, "desc": desc, "author":author}"""
	meta["navi"] = navigation(meta, ("Inhaltsverzeichnis", "contents.html"))
	meta["head"] = head(meta)
	meta["footer"] = footer()
	return """
<html>
%(head)s
<body>
	<a name="top"></a>
	<div align="center">
		<h1>%(seminar)s</h1>
	</div>
%(navi)s
	<div align="center">
		<h1>%(seminar)s</h1>
		<p>%(desc)s</p>
		<p>%(author)s</p>
	</div>
%(navi)s
%(footer)s
</body>	
</html>
""" % meta 

# contents

def frameContents(meta, content):
	meta["navi"] = navigation(meta, ("<< Startseite", "index.html"), sectionToNaviElem(content[0], "", " >>"))
	meta["head"] = head(meta, "Inhaltsverzeichnis")
	meta["toContentsList"] = toContentsList(content)
	meta["footer"] = footer()
	return """
<html>
%(head)s
<body>
	<a name="top"></a>
	<div align="center">
		<h1>Inhaltsverzeichnis</h1>
	</div>
%(navi)s
	<div>
%(toContentsList)s
	</div>
%(navi)s
%(footer)s
</body>	
</html>"""% meta

def sectiontoUl(section):
	sectionLinkName = sectionToFileName(section)
	def dictToName(subSection):
	#	print "subSection", subSection
		return subSection["name"]
	#print "section", section
	names = map(dictToName,section["content"])
	for i in range(len(names)):
		names[i] = toA(names[i], sectionLinkName + "#" + str(i))
	return toA(section["name"], sectionLinkName) + toUl(names)

def toContentsList(content):
	return toUl(map(sectiontoUl, content))

# section.html

def writeSubSections(meta, content):
	contentNaviElem = ("Inhaltsverzeichnis", "contents.html")
	
	for i in range(len(content)):
		prev = sectionToNaviElem(content[i-1], "<< ", "") if i > 0 else contentNaviElem
		next = sectionToNaviElem(content[i+1], "", " >>") if i < (len(content)-1) else contentNaviElem
		write(sectionToFileName(content[i]), frameSubSection(meta, prev, next, content[i]))

def frameSubSection(meta, prev, next, subSection):
	subSection["head"] = head(meta, subSection["name"])
	subSection["navi"] = navigation(meta, prev, next)
	subSection["desc"] = toP(prettyPrint2(subSection["desc"]))
	subSection["subSections"] = ""
	subSection["footer"] = footer()
	for i in range(len(subSection["content"])):
		subSection["subSections"] += toSubSection(i, subSection["content"][i])

	return """
<html>
%(head)s
<body>
	<a name="top"></a>
	<div align="center">
		<h1>%(name)s</h1>
	</div>
%(navi)s
	<div>
%(desc)s
%(subSections)s
	</div>
%(navi)s
%(footer)s
</body>	
</html>
""" % subSection

def prettyPrintCode(lang, code):
	try:
		from pygments import highlight
		from pygments.lexers import get_lexer_by_name
		from pygments.formatters import HtmlFormatter

		lexer = get_lexer_by_name(lang)
		formatter = HtmlFormatter(linenos=True, encoding='utf-8')

		return highlight(code, lexer, formatter)
	except ImportError:
		print ("pygments not found. fallback.")
		return "<pre>" + escape(code) + "</pre>"

	
def prettyPrint2(text):
	def aFormatter(text):
		toSection = False
		if text.startswith("-section") :
			toSection = True
			text = text[8:]
		if text[0] == "{":
			text = text[1:]
			tokens = text.split("}", 1)
		else:
			tokens = text.split("\n", 1)
		if toSection:
			tokens[0] = sectionNameToFileName(tokens[0])
		return (toA(tokens[0], tokens[0]), tokens[1] if len(tokens) > 1 else "")

	def hFormatter(text):
		tokens = text.split("\n", 1)
		line = tokens[0]
		h = line[0]
		line = prettyPrint2(line[1:])
		return ("</p>" + elem("h"+h, line) + "<p>", tokens[1] if len(tokens) > 1 else "")

	def codeFormatter(text):
		rest = text[1:]
		lang = ""
		if text[0] == "-":
			(lang, rest) = rest.split("{", 1)
		(code, rest) = rest.split("\\code}", 1)
		if len(lang):
			code = prettyPrintCode(lang, code)
		return ("</p><div class=codediv>" + code + "</div><p>", rest)
	def tableFormatter(text):
		(tab, rest) = text[1:].split("\\table}", 1)
		return ("</p><table border=1>" + tab + "</table><p>", rest)
	keywords = [
		("\\a", aFormatter),
		("\\h", hFormatter),
		("\\code", codeFormatter),
		("\\table", tableFormatter)	
	]
	done = ""
	while len(text):
		keys = filter(lambda x: x[0] >= 0, map(lambda k: (text.find(k[0]), k), keywords))
		if not len(keys):
			done += text.replace("\n", "<br />")
			text = ""
		else:
			key = keys[0]
			(before, text) = text.split(key[1][0], 1)
			before = prettyPrint2(before)
			mid, text = key[1][1](text)
			done += before
			try:
				done += mid
			except:
				print mid
				raise
	return done
	
	

def toSubSection(number, subSection):
	subSection["number"] = number
	subSection["content"] = toP(prettyPrint2(subSection["content"]))
	return """
		<hr />
		<h2><a name="%(number)s">%(name)s</a></h2>
%(content)s
""" % subSection

def main(meta, content):
	write("index.html", frameIndex(meta))
	write("contents.html", frameContents(meta, content))
	writeSubSections(meta, content)
	



if __name__ == "__main__":
	print prettyPrint2("""
\\code{
	foo
\\code}
""")


